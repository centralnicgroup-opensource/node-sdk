import { ResponseParser } from "./responseparser";
import { ResponseTemplateManager } from "./responsetemplatemanager";
var ResponseTemplate = (function () {
    function ResponseTemplate(raw) {
        if (!raw) {
            raw = ResponseTemplateManager.getInstance()
                .getTemplate("empty")
                .getPlain();
        }
        this.raw = raw;
        this.hash = ResponseParser.parse(raw);
        if (!Object.prototype.hasOwnProperty.call(this.hash, "CODE") ||
            !Object.prototype.hasOwnProperty.call(this.hash, "DESCRIPTION")) {
            this.raw = ResponseTemplateManager.getInstance()
                .getTemplate("invalid")
                .getPlain();
            this.hash = ResponseParser.parse(this.raw);
        }
    }
    ResponseTemplate.prototype.getCode = function () {
        return parseInt(this.hash.CODE, 10);
    };
    ResponseTemplate.prototype.getDescription = function () {
        return this.hash.DESCRIPTION;
    };
    ResponseTemplate.prototype.getPlain = function () {
        return this.raw;
    };
    ResponseTemplate.prototype.getQueuetime = function () {
        if (Object.prototype.hasOwnProperty.call(this.hash, "QUEUETIME")) {
            return parseFloat(this.hash.QUEUETIME);
        }
        return 0.0;
    };
    ResponseTemplate.prototype.getHash = function () {
        return this.hash;
    };
    ResponseTemplate.prototype.getRuntime = function () {
        if (Object.prototype.hasOwnProperty.call(this.hash, "RUNTIME")) {
            return parseFloat(this.hash.RUNTIME);
        }
        return 0.0;
    };
    ResponseTemplate.prototype.isError = function () {
        return this.hash.CODE.charAt(0) === "5";
    };
    ResponseTemplate.prototype.isSuccess = function () {
        return this.hash.CODE.charAt(0) === "2";
    };
    ResponseTemplate.prototype.isTmpError = function () {
        return this.hash.CODE.charAt(0) === "4";
    };
    ResponseTemplate.prototype.isPending = function () {
        return Object.prototype.hasOwnProperty.call(this.hash, "PENDING")
            ? this.hash.PENDING === "1"
            : false;
    };
    return ResponseTemplate;
}());
export { ResponseTemplate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2V0ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXNwb25zZXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUtwRTtJQWNFLDBCQUFtQixHQUFXO1FBQzVCLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixHQUFHLEdBQUcsdUJBQXVCLENBQUMsV0FBVyxFQUFFO2lCQUN4QyxXQUFXLENBQUMsT0FBTyxDQUFDO2lCQUNwQixRQUFRLEVBQUUsQ0FBQztTQUNmO1FBQ0QsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsSUFDRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztZQUN4RCxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxFQUMvRDtZQUNBLElBQUksQ0FBQyxHQUFHLEdBQUcsdUJBQXVCLENBQUMsV0FBVyxFQUFFO2lCQUM3QyxXQUFXLENBQUMsU0FBUyxDQUFDO2lCQUN0QixRQUFRLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUM7SUFDSCxDQUFDO0lBTU0sa0NBQU8sR0FBZDtRQUNFLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFNTSx5Q0FBYyxHQUFyQjtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDL0IsQ0FBQztJQU1NLG1DQUFRLEdBQWY7UUFDRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQU1NLHVDQUFZLEdBQW5CO1FBQ0UsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsRUFBRTtZQUNoRSxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBTU0sa0NBQU8sR0FBZDtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBTU0scUNBQVUsR0FBakI7UUFDRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFO1lBQzlELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEM7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFPTSxrQ0FBTyxHQUFkO1FBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDO0lBQzFDLENBQUM7SUFPTSxvQ0FBUyxHQUFoQjtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUMxQyxDQUFDO0lBT00scUNBQVUsR0FBakI7UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUM7SUFDMUMsQ0FBQztJQU1NLG9DQUFTLEdBQWhCO1FBQ0UsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUM7WUFDL0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLEdBQUc7WUFDM0IsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNaLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUEzSEQsSUEySEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXNwb25zZVBhcnNlciB9IGZyb20gXCIuL3Jlc3BvbnNlcGFyc2VyXCI7XG5pbXBvcnQgeyBSZXNwb25zZVRlbXBsYXRlTWFuYWdlciB9IGZyb20gXCIuL3Jlc3BvbnNldGVtcGxhdGVtYW5hZ2VyXCI7XG5cbi8qKlxuICogUmVzcG9uc2VUZW1wbGF0ZSBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgUmVzcG9uc2VUZW1wbGF0ZSB7XG4gIC8qKlxuICAgKiBwbGFpbiBBUEkgcmVzcG9uc2VcbiAgICovXG4gIHByb3RlY3RlZCByYXc6IHN0cmluZztcbiAgLyoqXG4gICAqIGhhc2ggcmVwcmVzZW50YXRpb24gb2YgcGxhaW4gQVBJIHJlc3BvbnNlXG4gICAqL1xuICBwcm90ZWN0ZWQgaGFzaDogYW55O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcmF3IHBsYWluIEFQSSByZXNwb25zZVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHJhdzogc3RyaW5nKSB7XG4gICAgaWYgKCFyYXcpIHtcbiAgICAgIHJhdyA9IFJlc3BvbnNlVGVtcGxhdGVNYW5hZ2VyLmdldEluc3RhbmNlKClcbiAgICAgICAgLmdldFRlbXBsYXRlKFwiZW1wdHlcIilcbiAgICAgICAgLmdldFBsYWluKCk7XG4gICAgfVxuICAgIHRoaXMucmF3ID0gcmF3O1xuICAgIHRoaXMuaGFzaCA9IFJlc3BvbnNlUGFyc2VyLnBhcnNlKHJhdyk7XG4gICAgaWYgKFxuICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmhhc2gsIFwiQ09ERVwiKSB8fFxuICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmhhc2gsIFwiREVTQ1JJUFRJT05cIilcbiAgICApIHtcbiAgICAgIHRoaXMucmF3ID0gUmVzcG9uc2VUZW1wbGF0ZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKVxuICAgICAgICAuZ2V0VGVtcGxhdGUoXCJpbnZhbGlkXCIpXG4gICAgICAgIC5nZXRQbGFpbigpO1xuICAgICAgdGhpcy5oYXNoID0gUmVzcG9uc2VQYXJzZXIucGFyc2UodGhpcy5yYXcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQVBJIHJlc3BvbnNlIGNvZGVcbiAgICogQHJldHVybnMgQVBJIHJlc3BvbnNlIGNvZGVcbiAgICovXG4gIHB1YmxpYyBnZXRDb2RlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuaGFzaC5DT0RFLCAxMCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IEFQSSByZXNwb25zZSBkZXNjcmlwdGlvblxuICAgKiBAcmV0dXJucyBBUEkgcmVzcG9uc2UgZGVzY3JpcHRpb25cbiAgICovXG4gIHB1YmxpYyBnZXREZXNjcmlwdGlvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmhhc2guREVTQ1JJUFRJT047XG4gIH1cblxuICAvKipcbiAgICogR2V0IFBsYWluIEFQSSByZXNwb25zZVxuICAgKiBAcmV0dXJucyBQbGFpbiBBUEkgcmVzcG9uc2VcbiAgICovXG4gIHB1YmxpYyBnZXRQbGFpbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnJhdztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgUXVldWV0aW1lIG9mIEFQSSByZXNwb25zZVxuICAgKiBAcmV0dXJucyBRdWV1ZXRpbWUgb2YgQVBJIHJlc3BvbnNlXG4gICAqL1xuICBwdWJsaWMgZ2V0UXVldWV0aW1lKCk6IG51bWJlciB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmhhc2gsIFwiUVVFVUVUSU1FXCIpKSB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLmhhc2guUVVFVUVUSU1FKTtcbiAgICB9XG4gICAgcmV0dXJuIDAuMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQVBJIHJlc3BvbnNlIGFzIEhhc2hcbiAgICogQHJldHVybnMgQVBJIHJlc3BvbnNlIGhhc2hcbiAgICovXG4gIHB1YmxpYyBnZXRIYXNoKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgUnVudGltZSBvZiBBUEkgcmVzcG9uc2VcbiAgICogQHJldHVybnMgUnVudGltZSBvZiBBUEkgcmVzcG9uc2VcbiAgICovXG4gIHB1YmxpYyBnZXRSdW50aW1lKCk6IG51bWJlciB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmhhc2gsIFwiUlVOVElNRVwiKSkge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5oYXNoLlJVTlRJTUUpO1xuICAgIH1cbiAgICByZXR1cm4gMC4wO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGN1cnJlbnQgQVBJIHJlc3BvbnNlIHJlcHJlc2VudHMgYW4gZXJyb3IgY2FzZVxuICAgKiBBUEkgcmVzcG9uc2UgY29kZSBpcyBhbiA1eHggY29kZVxuICAgKiBAcmV0dXJucyBib29sZWFuIHJlc3VsdFxuICAgKi9cbiAgcHVibGljIGlzRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzaC5DT0RFLmNoYXJBdCgwKSA9PT0gXCI1XCI7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgY3VycmVudCBBUEkgcmVzcG9uc2UgcmVwcmVzZW50cyBhIHN1Y2Nlc3MgY2FzZVxuICAgKiBBUEkgcmVzcG9uc2UgY29kZSBpcyBhbiAyeHggY29kZVxuICAgKiBAcmV0dXJucyBib29sZWFuIHJlc3VsdFxuICAgKi9cbiAgcHVibGljIGlzU3VjY2VzcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oYXNoLkNPREUuY2hhckF0KDApID09PSBcIjJcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBjdXJyZW50IEFQSSByZXNwb25zZSByZXByZXNlbnRzIGEgdGVtcG9yYXJ5IGVycm9yIGNhc2VcbiAgICogQVBJIHJlc3BvbnNlIGNvZGUgaXMgYW4gNHh4IGNvZGVcbiAgICogQHJldHVybnMgYm9vbGVhbiByZXN1bHRcbiAgICovXG4gIHB1YmxpYyBpc1RtcEVycm9yKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhhc2guQ09ERS5jaGFyQXQoMCkgPT09IFwiNFwiO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGN1cnJlbnQgb3BlcmF0aW9uIGlzIHJldHVybmVkIGFzIHBlbmRpbmdcbiAgICogQHJldHVybnMgYm9vbGVhbiByZXN1bHRcbiAgICovXG4gIHB1YmxpYyBpc1BlbmRpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmhhc2gsIFwiUEVORElOR1wiKVxuICAgICAgPyB0aGlzLmhhc2guUEVORElORyA9PT0gXCIxXCJcbiAgICAgIDogZmFsc2U7XG4gIH1cbn1cbiJdfQ==