export var fixedURLEnc = function (str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
};
var SocketConfig = (function () {
    function SocketConfig() {
        this.entity = "";
        this.login = "";
        this.otp = "";
        this.pw = "";
        this.remoteaddr = "";
        this.session = "";
        this.user = "";
    }
    SocketConfig.prototype.getPOSTData = function () {
        var data = "";
        if (this.entity !== "") {
            data += fixedURLEnc("s_entity") + "=" + fixedURLEnc(this.entity) + "&";
        }
        if (this.login !== "") {
            data += fixedURLEnc("s_login") + "=" + fixedURLEnc(this.login) + "&";
        }
        if (this.otp !== "") {
            data += fixedURLEnc("s_otp") + "=" + fixedURLEnc(this.otp) + "&";
        }
        if (this.pw !== "") {
            data += fixedURLEnc("s_pw") + "=" + fixedURLEnc(this.pw) + "&";
        }
        if (this.remoteaddr !== "") {
            data += fixedURLEnc("s_remoteaddr") + "=" + fixedURLEnc(this.remoteaddr) + "&";
        }
        if (this.session !== "") {
            data += fixedURLEnc("s_session") + "=" + fixedURLEnc(this.session) + "&";
        }
        if (this.user !== "") {
            data += fixedURLEnc("s_user") + "=" + fixedURLEnc(this.user) + "&";
        }
        return data;
    };
    SocketConfig.prototype.getSession = function () {
        return this.session;
    };
    SocketConfig.prototype.getSystemEntity = function () {
        return this.entity;
    };
    SocketConfig.prototype.setLogin = function (value) {
        this.session = "";
        this.login = value;
        return this;
    };
    SocketConfig.prototype.setOTP = function (value) {
        this.session = "";
        this.otp = value;
        return this;
    };
    SocketConfig.prototype.setPassword = function (value) {
        this.session = "";
        this.pw = value;
        return this;
    };
    SocketConfig.prototype.setRemoteAddress = function (value) {
        this.remoteaddr = value;
        return this;
    };
    SocketConfig.prototype.setSession = function (value) {
        this.session = value;
        this.login = "";
        this.pw = "";
        this.otp = "";
        return this;
    };
    SocketConfig.prototype.setSystemEntity = function (value) {
        this.entity = value;
        return this;
    };
    SocketConfig.prototype.setUser = function (value) {
        this.user = value;
        return this;
    };
    return SocketConfig;
}());
export { SocketConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0Y29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NvY2tldGNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsSUFBTSxXQUFXLEdBQUcsVUFBQyxHQUFXO0lBQ3JDLE9BQU8sa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxVQUFDLENBQUM7UUFDbkQsT0FBTyxNQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBSSxDQUFDO0lBQzFELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBS0Y7SUE4QkU7UUFDRSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQU1NLGtDQUFXLEdBQWxCO1FBQ0UsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRTtZQUN0QixJQUFJLElBQU8sV0FBVyxDQUFDLFVBQVUsQ0FBQyxTQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQUcsQ0FBQztTQUNuRTtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxFQUFFLEVBQUU7WUFDckIsSUFBSSxJQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFHLENBQUM7U0FDakU7UUFDRCxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxFQUFFO1lBQ25CLElBQUksSUFBTyxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBRyxDQUFDO1NBQzdEO1FBQ0QsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNsQixJQUFJLElBQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxTQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQUcsQ0FBQztTQUMzRDtRQUNELElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFLEVBQUU7WUFDMUIsSUFBSSxJQUFPLFdBQVcsQ0FBQyxjQUFjLENBQUMsU0FBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFHLENBQUM7U0FDM0U7UUFDRCxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssRUFBRSxFQUFFO1lBQ3ZCLElBQUksSUFBTyxXQUFXLENBQUMsV0FBVyxDQUFDLFNBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBRyxDQUFDO1NBQ3JFO1FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRTtZQUNwQixJQUFJLElBQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxTQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQUcsQ0FBQztTQUMvRDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQU1NLGlDQUFVLEdBQWpCO1FBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFNTSxzQ0FBZSxHQUF0QjtRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBT00sK0JBQVEsR0FBZixVQUFnQixLQUFhO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQU9NLDZCQUFNLEdBQWIsVUFBYyxLQUFhO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQU9NLGtDQUFXLEdBQWxCLFVBQW1CLEtBQWE7UUFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDaEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBT00sdUNBQWdCLEdBQXZCLFVBQXdCLEtBQWE7UUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBT00saUNBQVUsR0FBakIsVUFBa0IsS0FBYTtRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBUU0sc0NBQWUsR0FBdEIsVUFBdUIsS0FBYTtRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFPTSw4QkFBTyxHQUFkLFVBQWUsS0FBYTtRQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNsQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUFsS0QsSUFrS0MiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZml4ZWRVUkxFbmMgPSAoc3RyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCkqXS9nLCAoYykgPT4ge1xuICAgIHJldHVybiBgJSR7Yy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfWA7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBTb2NrZXRDb25maWcgQ2xhc3NcbiAqL1xuZXhwb3J0IGNsYXNzIFNvY2tldENvbmZpZyB7XG4gIC8qKlxuICAgKiBBUEkgc3lzdGVtIGVudGl0eS4gXCI1NGNkXCIgZm9yIExJVkUgc3lzdGVtOyBcIjEyMzRcIiBmb3IgT1QmRSBzeXN0ZW1cbiAgICovXG4gIHByaXZhdGUgZW50aXR5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBhY2NvdW50IG5hbWVcbiAgICovXG4gIHByaXZhdGUgbG9naW46IHN0cmluZztcbiAgLyoqXG4gICAqIG9uZSB0aW1lIHBhc3N3b3JkICgyRkEpXG4gICAqL1xuICBwcml2YXRlIG90cDogc3RyaW5nO1xuICAvKipcbiAgICogYWNjb3VudCBwYXNzd29yZFxuICAgKi9cbiAgcHJpdmF0ZSBwdzogc3RyaW5nO1xuICAvKipcbiAgICogcmVtb3RlIGlwIGFkZHJlc3MgKGlwIGZpbHRlcilcbiAgICovXG4gIHByaXZhdGUgcmVtb3RlYWRkcjogc3RyaW5nO1xuICAvKipcbiAgICogQVBJIHNlc3Npb24gaWRcbiAgICovXG4gIHByaXZhdGUgc2Vzc2lvbjogc3RyaW5nO1xuICAvKipcbiAgICogc3VidXNlciBhY2NvdW50IG5hbWUgKHN1YnVzZXIgc3BlY2lmaWMgZGF0YSB2aWV3KVxuICAgKi9cbiAgcHJpdmF0ZSB1c2VyOiBzdHJpbmc7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZW50aXR5ID0gXCJcIjtcbiAgICB0aGlzLmxvZ2luID0gXCJcIjtcbiAgICB0aGlzLm90cCA9IFwiXCI7XG4gICAgdGhpcy5wdyA9IFwiXCI7XG4gICAgdGhpcy5yZW1vdGVhZGRyID0gXCJcIjtcbiAgICB0aGlzLnNlc3Npb24gPSBcIlwiO1xuICAgIHRoaXMudXNlciA9IFwiXCI7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIFBPU1QgZGF0YSBzdHJpbmcgb3V0IG9mIGNvbm5lY3Rpb24gZGF0YVxuICAgKiBAcmV0dXJucyBQT1NUIGRhdGEgc3RyaW5nXG4gICAqL1xuICBwdWJsaWMgZ2V0UE9TVERhdGEoKTogc3RyaW5nIHtcbiAgICBsZXQgZGF0YSA9IFwiXCI7XG4gICAgaWYgKHRoaXMuZW50aXR5ICE9PSBcIlwiKSB7XG4gICAgICBkYXRhICs9IGAke2ZpeGVkVVJMRW5jKFwic19lbnRpdHlcIil9PSR7Zml4ZWRVUkxFbmModGhpcy5lbnRpdHkpfSZgO1xuICAgIH1cbiAgICBpZiAodGhpcy5sb2dpbiAhPT0gXCJcIikge1xuICAgICAgZGF0YSArPSBgJHtmaXhlZFVSTEVuYyhcInNfbG9naW5cIil9PSR7Zml4ZWRVUkxFbmModGhpcy5sb2dpbil9JmA7XG4gICAgfVxuICAgIGlmICh0aGlzLm90cCAhPT0gXCJcIikge1xuICAgICAgZGF0YSArPSBgJHtmaXhlZFVSTEVuYyhcInNfb3RwXCIpfT0ke2ZpeGVkVVJMRW5jKHRoaXMub3RwKX0mYDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHcgIT09IFwiXCIpIHtcbiAgICAgIGRhdGEgKz0gYCR7Zml4ZWRVUkxFbmMoXCJzX3B3XCIpfT0ke2ZpeGVkVVJMRW5jKHRoaXMucHcpfSZgO1xuICAgIH1cbiAgICBpZiAodGhpcy5yZW1vdGVhZGRyICE9PSBcIlwiKSB7XG4gICAgICBkYXRhICs9IGAke2ZpeGVkVVJMRW5jKFwic19yZW1vdGVhZGRyXCIpfT0ke2ZpeGVkVVJMRW5jKHRoaXMucmVtb3RlYWRkcil9JmA7XG4gICAgfVxuICAgIGlmICh0aGlzLnNlc3Npb24gIT09IFwiXCIpIHtcbiAgICAgIGRhdGEgKz0gYCR7Zml4ZWRVUkxFbmMoXCJzX3Nlc3Npb25cIil9PSR7Zml4ZWRVUkxFbmModGhpcy5zZXNzaW9uKX0mYDtcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlciAhPT0gXCJcIikge1xuICAgICAgZGF0YSArPSBgJHtmaXhlZFVSTEVuYyhcInNfdXNlclwiKX09JHtmaXhlZFVSTEVuYyh0aGlzLnVzZXIpfSZgO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQVBJIFNlc3Npb24gSUQgaW4gdXNlXG4gICAqIEByZXR1cm5zIEFQSSBTZXNzaW9uIElEXG4gICAqL1xuICBwdWJsaWMgZ2V0U2Vzc2lvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNlc3Npb247XG4gIH1cblxuICAvKipcbiAgICogR2V0IEFQSSBTeXN0ZW0gRW50aXR5IGluIHVzZVxuICAgKiBAcmV0dXJucyBBUEkgU3lzdGVtIEVudGl0eVxuICAgKi9cbiAgcHVibGljIGdldFN5c3RlbUVudGl0eSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmVudGl0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYWNjb3VudCBuYW1lIHRvIHVzZVxuICAgKiBAcGFyYW0gdmFsdWUgYWNjb3VudCBuYW1lXG4gICAqIEByZXR1cm5zIEN1cnJlbnQgU29ja2V0Q29uZmlnIGluc3RhbmNlIGZvciBtZXRob2QgY2hhaW5pbmdcbiAgICovXG4gIHB1YmxpYyBzZXRMb2dpbih2YWx1ZTogc3RyaW5nKTogU29ja2V0Q29uZmlnIHtcbiAgICB0aGlzLnNlc3Npb24gPSBcIlwiO1xuICAgIHRoaXMubG9naW4gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb25lIHRpbWUgcGFzc3dvcmQgdG8gdXNlXG4gICAqIEBwYXJhbSB2YWx1ZSBvbmUgdGltZSBwYXNzd29yZFxuICAgKiBAcmV0dXJucyBDdXJyZW50IFNvY2tldENvbmZpZyBpbnN0YW5jZSBmb3IgbWV0aG9kIGNoYWluaW5nXG4gICAqL1xuICBwdWJsaWMgc2V0T1RQKHZhbHVlOiBzdHJpbmcpOiBTb2NrZXRDb25maWcge1xuICAgIHRoaXMuc2Vzc2lvbiA9IFwiXCI7XG4gICAgdGhpcy5vdHAgPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYWNjb3VudCBwYXNzd29yZCB0byB1c2VcbiAgICogQHBhcmFtIHZhbHVlIGFjY291bnQgcGFzc3dvcmRcbiAgICogQHJldHVybnMgQ3VycmVudCBTb2NrZXRDb25maWcgaW5zdGFuY2UgZm9yIG1ldGhvZCBjaGFpbmluZ1xuICAgKi9cbiAgcHVibGljIHNldFBhc3N3b3JkKHZhbHVlOiBzdHJpbmcpOiBTb2NrZXRDb25maWcge1xuICAgIHRoaXMuc2Vzc2lvbiA9IFwiXCI7XG4gICAgdGhpcy5wdyA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBSZW1vdGUgSVAgQWRkcmVzcyB0byB1c2VcbiAgICogQHBhcmFtIHZhbHVlIHJlbW90ZSBpcCBhZGRyZXNzXG4gICAqIEByZXR1cm5zIEN1cnJlbnQgU29ja2V0Q29uZmlnIGluc3RhbmNlIGZvciBtZXRob2QgY2hhaW5pbmdcbiAgICovXG4gIHB1YmxpYyBzZXRSZW1vdGVBZGRyZXNzKHZhbHVlOiBzdHJpbmcpOiBTb2NrZXRDb25maWcge1xuICAgIHRoaXMucmVtb3RlYWRkciA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBBUEkgU2Vzc2lvbiBJRCB0byB1c2VcbiAgICogQHBhcmFtIHZhbHVlIEFQSSBTZXNzaW9uIElEXG4gICAqIEByZXR1cm5zIEN1cnJlbnQgU29ja2V0Q29uZmlnIGluc3RhbmNlIGZvciBtZXRob2QgY2hhaW5pbmdcbiAgICovXG4gIHB1YmxpYyBzZXRTZXNzaW9uKHZhbHVlOiBzdHJpbmcpOiBTb2NrZXRDb25maWcge1xuICAgIHRoaXMuc2Vzc2lvbiA9IHZhbHVlO1xuICAgIHRoaXMubG9naW4gPSBcIlwiO1xuICAgIHRoaXMucHcgPSBcIlwiO1xuICAgIHRoaXMub3RwID0gXCJcIjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgQVBJIFN5c3RlbSBFbnRpdHkgdG8gdXNlXG4gICAqIFRoaXMgaXMgc2V0IHRvIDU0Y2QgLyBMSVZFIFN5c3RlbSBieSBkZWZhdWx0XG4gICAqIEBwYXJhbSB2YWx1ZSBBUEkgU3lzdGVtIEVudGl0eVxuICAgKiBAcmV0dXJucyBDdXJyZW50IFNvY2tldENvbmZpZyBpbnN0YW5jZSBmb3IgbWV0aG9kIGNoYWluaW5nXG4gICAqL1xuICBwdWJsaWMgc2V0U3lzdGVtRW50aXR5KHZhbHVlOiBzdHJpbmcpOiBTb2NrZXRDb25maWcge1xuICAgIHRoaXMuZW50aXR5ID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHN1YnVzZXIgYWNjb3VudCBuYW1lIChmb3Igc3VidXNlciBkYXRhIHZpZXcpXG4gICAqIEBwYXJhbSB2YWx1ZSBzdWJ1c2VyIGFjY291bnQgbmFtZVxuICAgKiBAcmV0dXJucyBDdXJyZW50IFNvY2tldENvbmZpZyBpbnN0YW5jZSBmb3IgbWV0aG9kIGNoYWluaW5nXG4gICAqL1xuICBwdWJsaWMgc2V0VXNlcih2YWx1ZTogc3RyaW5nKTogU29ja2V0Q29uZmlnIHtcbiAgICB0aGlzLnVzZXIgPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIl19