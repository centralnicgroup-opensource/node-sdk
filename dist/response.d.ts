import * as defresponses from './defaultresponses';
export declare const responses: defresponses.IResponseTemplates;
export declare const pagerRegexp: RegExp;
export declare class ResponseIterator {
    rows: any[];
    index: number;
    constructor(rows: any[]);
    hasPrevious(): boolean;
    previous(): any;
    next(): any;
    hasNext(): boolean;
    rewind(): any;
    current(): any;
}
export declare class Response {
    usecolregexp: boolean;
    colregexp: RegExp;
    data: any;
    cmd: any;
    it: ResponseIterator;
    constructor(p_r: any, p_command: any);
    useColumns(arr?: String | String[]): void;
    rewind(): any;
    hasNext(): boolean;
    next(): any;
    hasPrevious(): boolean;
    previous(): any;
    current(): any;
    get(p_prop: string): string | null;
    getColumn(p_prop: string): any;
    getColumnIndex(p_prop: string, p_idx: number, p_cast_int: boolean): any;
    applyCustomChanges(r: any): any;
    as_string(): string;
    as_hash(): any;
    as_list(): any;
    code(): string | null;
    description(): string | null;
    properties(): any;
    runtime(): number | null;
    queuetime(): number | null;
    is_success(): boolean;
    is_tmp_error(): boolean;
    is_error(): boolean;
    columns(): string[];
    getPagination(): any;
    first(): number;
    count(): number;
    last(): number;
    limit(): number;
    total(): number;
    pages(): number;
    page(): number;
    prevpage(): number;
    nextpage(): number;
}
export declare const parse: (r: any) => any;
export declare const serialize: (p_r: any) => string;
export declare const getTemplates: () => defresponses.IResponseTemplates;
export declare const getTemplate: (p_tplid: string, p_parse: boolean) => any;
export declare const isTemplateMatch: (p_r: any, p_tplid: string) => boolean;
